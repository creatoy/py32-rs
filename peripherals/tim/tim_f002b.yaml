"TIM*":
  CR1:
    ARPE:
      Disabled: [0, "TIMx_APRR register is not buffered"]
      Enabled: [1, "TIMx_APRR register is buffered"]
    URS:
      AnyEvent: [0, "Any of counter overflow/underflow, setting UG, or update through slave mode, generates an update interrupt or DMA request"]
      CounterOnly: [1, "Only counter overflow/underflow generates an update interrupt or DMA request"]
    UDIS:
      Enabled: [0, "Update event enabled"]
      Disabled: [1, "Update event disabled"]
    CEN:
      Disabled: [0, "Counter disabled"]
      Enabled: [1, "Counter enabled"]
  EGR:
    UG:
      _write:
        Trigger: [1, "Re-initializes the timer counter and generates an update of the registers."]

TIM1:
  "CCR?":
    _modify:
      "CCR?":
        name: CCR
  CR2:
    CCUS:
      Bit: [0, "When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only"]
      BitOrEdge: [1, "When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI"]
  SMCR:
    ETP:
      NotInverted: [0, "ETR is noninverted, active at high level or rising edge"]
      Inverted: [1, "ETR is inverted, active at low level or falling edge"]
    ECE:
      Disabled: [0, "External clock mode 2 disabled"]
      Enabled: [1, "External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal."]
    ETPS:
      Div1: [0, "Prescaler OFF"]
      Div2: [1, "ETRP frequency divided by 2"]
      Div4: [2, "ETRP frequency divided by 4"]
      Div8: [3, "ETRP frequency divided by 8"]
    ETF:
      NoFilter: [0, "No filter, sampling is done at fDTS"]
      FCK_INT_N2: [1, "fSAMPLING=fCK_INT, N=2"]
      FCK_INT_N4: [2, "fSAMPLING=fCK_INT, N=4"]
      FCK_INT_N8: [3, "fSAMPLING=fCK_INT, N=8"]
      FDTS_Div2_N6: [4, "fSAMPLING=fDTS/2, N=6"]
      FDTS_Div2_N8: [5, "fSAMPLING=fDTS/2, N=8"]
      FDTS_Div4_N6: [6, "fSAMPLING=fDTS/4, N=6"]
      FDTS_Div4_N8: [7, "fSAMPLING=fDTS/4, N=8"]
      FDTS_Div8_N6: [8, "fSAMPLING=fDTS/8, N=6"]
      FDTS_Div8_N8: [9, "fSAMPLING=fDTS/8, N=8"]
      FDTS_Div16_N5: [10, "fSAMPLING=fDTS/16, N=5"]
      FDTS_Div16_N6: [11, "fSAMPLING=fDTS/16, N=6"]
      FDTS_Div16_N8: [12, "fSAMPLING=fDTS/16, N=8"]
      FDTS_Div32_N5: [13, "fSAMPLING=fDTS/32, N=5"]
      FDTS_Div32_N6: [14, "fSAMPLING=fDTS/32, N=6"]
      FDTS_Div32_N8: [15, "fSAMPLING=fDTS/32, N=8"]

"TIM[13]":
  CR1:
    CMS:
      EdgeAligned: [0, "The counter counts up or down depending on the direction bit"]
      CenterAligned1: [1, "The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting down."]
      CenterAligned2: [2, "The counter counts up and down alternatively. Output compare interrupt flags are set only when the counter is counting up."]
      CenterAligned3: [3, "The counter counts up and down alternatively. Output compare interrupt flags are set both when the counter is counting up or down."]
    DIR:
      Up: [0, "Counter used as upcounter"]
      Down: [1, "Counter used as downcounter"]
  CCMR1_INPUT:
    IC2F: [0, 15]
    CC2S:
      TI2: [1, "CC2 channel is configured as input, IC2 is mapped on TI2"]
      TI1: [2, "CC2 channel is configured as input, IC2 is mapped on TI1"]
      TRC: [3, "CC2 channel is configured as input, IC2 is mapped on TRC"]
  CCMR1_OUTPUT:
    OC2PE:
      Disabled: [0, "Preload register on CCR2 disabled. New values written to CCR2 are taken into account immediately"]
      Enabled: [1, "Preload register on CCR2 enabled. Preload value is loaded into active register on each update event"]
    CC2S:
      Output: [0, "CC2 channel is configured as output"]
  CCMR2_INPUT:
    IC?F: [0, 15]
    IC?PSC: [0, 3]
    CC4S:
      Output: [0, "CC4 channel is configured as output"]
      TI4: [1, "CC4 channel is configured as input, IC4 is mapped on TI4"]
      TI3: [2, "CC4 channel is configured as input, IC4 is mapped on TI3"]
      TRC: [3, "CC4 channel is configured as input, IC4 is mapped on TRC"]
    CC3S:
      Output: [0, "CC3 channel is configured as output"]
      TI3: [1, "CC3 channel is configured as input, IC3 is mapped on TI3"]
      TI4: [2, "CC3 channel is configured as input, IC3 is mapped on TI4"]
      TRC: [3, "CC3 channel is configured as input, IC3 is mapped on TRC"]
  CCMR2_OUTPUT:
    OC?PE:
      Disabled: [0, "Preload register on CCRx disabled. New values written to CCRx are taken into account immediately"]
      Enabled: [1, "Preload register on CCRx enabled. Preload value is loaded into active register on each update event"]
    CC?S:
      Output: [0, "CCx channel is configured as output"]
  CCMR?_OUTPUT:
    OC?M:
      Frozen: [0, "The comparison between the output compare register TIMx_CCRy and the counter TIMx_CNT has no effect on the outputs / OpmMode1: Retriggerable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). In down-counting mode, the channel is inactive"]
      ActiveOnMatch: [1, "Set channel to active level on match. OCyREF signal is forced high when the counter matches the capture/compare register / OpmMode2: Inversely to OpmMode1"]
      InactiveOnMatch: [2, "Set channel to inactive level on match. OCyREF signal is forced low when the counter matches the capture/compare register / Reserved"]
      Toggle: [3, "OCyREF toggles when TIMx_CNT=TIMx_CCRy / Reserved"]
      ForceInactive: [4, "OCyREF is forced low / CombinedPwmMode1: OCyREF has the same behavior as in PWM mode 1. OCyREFC is the logical OR between OC1REF and OC2REF"]
      ForceActive: [5, "OCyREF is forced high / CombinedPwmMode2: OCyREF has the same behavior as in PWM mode 2. OCyREFC is the logical AND between OC1REF and OC2REF"]
      PwmMode1: [6, "In upcounting, channel is active as long as TIMx_CNT<TIMx_CCRy else inactive. In downcounting, channel is inactive as long as TIMx_CNT>TIMx_CCRy else active / AsymmetricPwmMode1: OCyREF has the same behavior as in PWM mode 1. OCyREFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down"]
      PwmMode2: [7, "Inversely to PwmMode1 / AsymmetricPwmMode2: Inversely to AsymmetricPwmMode1"]

"TIM?, TIM1[46]":
  CR1:
    CKD:
      Div1: [0, "t_DTS = t_CK_INT"]
      Div2: [1, "t_DTS = 2 x t_CK_INT"]
      Div4: [2, "t_DTS = 4 x t_CK_INT"]
    OPM:
      Disabled: [0, "Counter is not stopped at update event"]
      Enabled: [1, "Counter stops counting at the next update event (clearing the CEN bit)"]
  CR2:
    TI1S:
      Normal: [0, "The TIMx_CH1 pin is connected to TI1 input"]
      XOR: [1, "The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"]
    MMS:
      Reset: [0, "The UG bit from the TIMx_EGR register is used as trigger output"]
      Enable: [1, "The counter enable signal, CNT_EN, is used as trigger output"]
      Update: [2, "The update event is selected as trigger output"]
      ComparePulse: [3, "The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"]
      CompareOC1: [4, "OC1REF signal is used as trigger output"]
      CompareOC2: [5, "OC2REF signal is used as trigger output"]
      CompareOC3: [6, "OC3REF signal is used as trigger output"]
      CompareOC4: [7, "OC4REF signal is used as trigger output"]
  SMCR:
    MSM:
      NoSync: [0, "No action"]
      Sync: [1, "The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event."]
    TS:
      ITR0: [0, "Internal Trigger 0 (ITR0)"]
      ITR1: [1, "Internal Trigger 1 (ITR1)"]
      ITR2: [2, "Internal Trigger 2 (ITR2)"]
      TI1F_ED: [4, "TI1 Edge Detector (TI1F_ED)"]
      TI1FP1: [5, "Filtered Timer Input 1 (TI1FP1)"]
      TI2FP2: [6, "Filtered Timer Input 2 (TI2FP2)"]
      ETRF: [7, "External Trigger input (ETRF)"]
    SMS:
      Disabled: [0, "Slave mode disabled - if CEN = â€˜1 then the prescaler is clocked directly by the internal clock."]
      Encoder_Mode_1: [1, "Encoder mode 1 - Counter counts up/down on TI2FP1 edge depending on TI1FP2 level."]
      Encoder_Mode_2: [2, "Encoder mode 2 - Counter counts up/down on TI1FP2 edge depending on TI2FP1 level."]
      Encoder_Mode_3: [3, "Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input."]
      Reset_Mode: [4, "Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers."]
      Gated_Mode: [5, "Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled."]
      Trigger_Mode: [6, "Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled."]
      Ext_Clock_Mode: [7, "External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter."]
  DIER:
    BIE:
      Disabled: [0, "Break interrupt disabled"]
      Enabled: [1, "Break interrupt enabled"]
    TIE:
      Disabled: [0, "Trigger interrupt disabled"]
      Enabled: [1, "Trigger interrupt enabled"]
    COMIE:
      Disabled: [0, "COM interrupt disabled"]
      Enabled: [1, "COM interrupt enabled"]
    "CC?IE":
      Disabled: [0, "CCx interrupt disabled"]
      Enabled: [1, "CCx interrupt enabled"]
    UIE:
      Disabled: [0, "Update interrupt disabled"]
      Enabled: [1, "Update interrupt enabled"]
  SR:
    "CC?OF":
      _read:
        Overcapture: [1, "The counter value has been captured in TIMx_CCRx register while CCxIF flag was already set"]
      _W0C:
        Clear: [0, "Clear flag"]
    TIF:
      _read:
        NoTrigger: [0, "No trigger event occurred"]
        Trigger: [1, "Trigger interrupt pending"]
      _W0C:
        Clear: [0, "Clear flag"]
    "CC?IF":
      _read:
        Match: [1, "If CC1 is an output: The content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. If CC1 is an input: The counter value has been captured in TIMx_CCR1 register."]
      _W0C:
        Clear: [0, "Clear flag"]
  EGR:
    TG:
      _write:
        Trigger: [1, "The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled."]
